#!/usr/bin/python3

# Script: Ops 401 Class 32 script
# Author: Paul Stroud
# Date of latest revision: 05/31/23
# Purpose: Signature-based Malware Detection Part 2 of 3
# Resources used: google, stackoverflow, github demo, chatgpt

# MAIN REQS:
# Continue developing your Python malware detection tool.
# Alter your search code to recursively scan each file and folder in the user input directory path and print it to the screen.
# For each file scanned within the scope of your search directory:
#   Generate the fileâ€™s MD5 hash using Hashlib.
#   Assign the MD5 hash to a variable.
#   Print the variable to the screen along with a timestamp, file name, file size, and complete (not symbolic) file path.


import platform # to get OS name
import os       # for os.walk() recursive directory list
import hashlib
import datetime
import math


### FUNCTIONS ####

blocksize = 65536       # how many bytes to read at a time
def sha1_chksum(fname):
    shaka = hashlib.sha1()          # holds the sha1 hash
    with open(fname, 'rb') as file: # process the file
         slice = 0                  # initialize the var; holds chunks of the file
         while slice != b'':        # repeat until the whole file's been processed
              slice = file.read(blocksize)  # read a block
              shaka.update(slice)           # recalculate the hash
    return shaka.hexdigest()        # return hash as a hex string

fsize_str = ("B", "KB", "MB", "GB", "TB")   # global tuple to hold file size units
# convert integer filesize in bytes to a human-readable format
def fmt_fsize(fsize):      
    if fsize == 0: return "0 B"     # if zero, return "0 B" to avoid an error

    unit = int(math.floor(math.log(fsize, 1024)))       # calc the power of 1024 that is closest to fsize
    adj_size = round(fsize / math.pow(1024, unit), 2)   # calc adjusted size in KB, MB, etc.
    if adj_size % 1 == 0: adj_size = int(adj_size)

    return f"{adj_size} {fsize_str[unit]}"              # return the string "N xB": for example, "15.26 MB"

   

#### MAIN ####

os_name = platform.system()   # get the OS name
if not (os_name == "Linux" or os_name == "Windows"):
    print("ERROR: Unknown OS. Exiting...")  # doesn't like apples
print(f"OS = {os_name}")

dir = input("Enter the full dir path to search (current dir if empty) : ")
#dir = "/home/user/TEST/"
dir = dir if dir != '' else os.getcwd() # if no input, use PWD from the OS




total_files = 0     # all files in the dir/subdirs

print(f"\n[ Contents of {dir}: ]")

hash_array = []     # 2D array to hold checksums and other file metadata
tab = "  "          # constant for tabbing out text
dtab = ""           # indent for dir names
ftab = tab          # indent for file names
for rootdir, subdirs, files in os.walk(dir):    # recursively parse the dir
    total_files += len(files)                   # count all files

    print(f"{dtab}{rootdir}/")                  # print the dir name
    if not files: print(ftab + "<no files>")    # if dir is empty
    else:                                       # if there are files in this dir
        for i in files:
            print(f"{ftab}- {i}")                                                   # print file names in a list
            full_path = f'{rootdir}/{i}'                                            # add extra '/' for the full file path
            cur_time = datetime.datetime.now().strftime("%Y%m%d %H:%M:%S")          # format date/time
            filesize = os.path.getsize(full_path)                                   # get file size
            hash = sha1_chksum(full_path)                                           # calc SHA1 hash
            hash_array.append([i, hash, cur_time, fmt_fsize(filesize), full_path])  # add all data to the array
    dtab += tab     # increase dir indent
    ftab += tab     # increase file indent


### REQ: Print the variable to the screen along with a timestamp, 
###      file name, file size, and complete (not symbolic) file path.
columns = [ "FILE NAME", "SHA1 HASH", "DATE/TIME", "FILE SIZE", "FILE LOCATION" ]
column_width = []   # holds column widths for output formatting
for i in range(len(columns)):
   # calc the correct width for the largest text in the column + 3 extra chars for whitespace
   column_width.append(max(max(len(row[i]) for row in hash_array), len(columns[i]))+3)

# pre-format output with proper spacing for column names
output = f"{columns[0]:<{column_width[0]}}" \
         f"{columns[1]:<{column_width[1]}}" \
         f"{columns[2]:<{column_width[2]}}" \
         f"{columns[3]:<{column_width[3]}}" \
         f"{columns[4]}"
print(f'\n{output}')

for i in range(len(hash_array)):    # iterate over the array
   # pre-format output with proper spacing for each column
   output = f"{hash_array[i][0]:<{column_width[0]}}" \
            f"{hash_array[i][1]:<{column_width[1]}}" \
            f"{hash_array[i][2]:<{column_width[2]}}" \
            f"{hash_array[i][3]:<{column_width[3]}}" \
            f"{hash_array[i][4]}"
   print(output)

# more numbers
print(f'Total files in {dir}:\t{total_files}\n')

# le end