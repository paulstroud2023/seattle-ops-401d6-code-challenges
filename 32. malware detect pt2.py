#!/usr/bin/python3

# Script: Ops 401 Class 32 script
# Author: Paul Stroud
# Date of latest revision: 05/31/23
# Purpose: Signature-based Malware Detection Part 2 of 3
# Resources used: google, stackoverflow, github demo, chatgpt

# MAIN REQS:
# Continue developing your Python malware detection tool.
# Alter your search code to recursively scan each file and folder in the user input directory path and print it to the screen.
# For each file scanned within the scope of your search directory:
#   Generate the fileâ€™s MD5 hash using Hashlib.
#   Assign the MD5 hash to a variable.
#   Print the variable to the screen along with a timestamp, file name, file size, and complete (not symbolic) file path.




import platform # to get OS name
import os       # for os.walk() recursive directory list
#import glob     # to search for files in a dir using a filename pattern
import hashlib
import datetime
import math


def sha1_chksum(fname):
    shaka = hashlib.sha1()  # sha1 hash for the file
    with open(fname, 'rb') as file:
         slice = 0
         while slice != b'':
              slice = file.read(65536)
              shaka.update(slice)
    return shaka.hexdigest()

fsize_str = ("B", "KB", "MB", "GB", "TB")
def fmt_fsize(fsize):   # converts integer filesize in bytes to a human-readable format
    if fsize == 0:  # if zero, return "0 B" to avoid an error
      return "0 B"

    unit = int(math.floor(math.log(fsize, 1024)))       # calculate the power of 1024 that is closest to fsize
    adj_size = round(fsize / math.pow(1024, unit), 2)   # adjusted size in KB, MB, etc.

    return f"{adj_size} {fsize_str[unit]}"              # return the string "N xB": for example, "5.82 MB"

   


os_name = platform.system()   # get the OS name
if not (os_name == "Linux" or os_name == "Windows"):
    print("ERROR: Unknown OS. Exiting...")  # doesn't like apples
print(f"OS = {os_name}")

#pwd = os.getcwd()
#input(pwd)

# user input block
#pattern_str = input("Enter space-separated file patterns (default='*.exe') : ")
#pattern_str = '*.exe' if pattern_str == '' else pattern_str
pattern_str = '*.txt *.log'
pattern_list = pattern_str.split(" ")   # extract each file pattern from the string

#dir = input("Enter the directory to search (current directory if empty) : ")
dir = "/home/user/TEST/"
dir = dir if dir != '' else os.getcwd()




total_files = 0     # all files in the dir/subdirs
match_list = []  # list of files that match our pattern(s)

print(f"\nSHA1 checksums for all files in the {dir}:")

hash_array = []
tab = "  "  # constant for tabbing out text
dtab = ""   # tab for dir name lines
ftab = tab  # tab for file name lines
for rootdir, subdirs, files in os.walk(dir):    # recursively parse the dir
    print(dtab + rootdir)
    total_files += len(files)       # count all files
    
#    if ((not files) and (not subdirs)): print(ftab + "<empty>")
    if not files: print(ftab + "<no files>")
    else:
        for i in files:
            full_path = f'{rootdir}{i}' if rootdir == dir else f'{rootdir}/{i}'
            cur_time = datetime.datetime.now().strftime("%Y%m%d %H:%M:%S")
            filesize = os.path.getsize(full_path)
            hash = sha1_chksum(full_path)
#   Print the variable to the screen along with a timestamp, file name, file size, and complete (not symbolic) file path.
            hash_array.append([i, hash, cur_time, fmt_fsize(filesize), full_path])
            pass
    dtab += tab
    ftab += tab

#            print(f'{ftab}{i}  {cur_time}  {hash}  {filesize} {full_path}')



for i in hash_array: print(i)
input()


columns = [ "FILE NAME", "SHA1 HASH", "DATE/TIME", "FILE SIZE", "FILE LOCATION" ]
column_width = []
for i in range(len(columns)):
   column_width.append(max(max(len(row[i]) for row in hash_array), len(columns[i]))+3)
input(column_width)                      

# GOOD!


#format_string = "{{:<{}}}:{{:<{}}}:{}:{}:{}"
output = f"{columns[0]:<{column_width[0]}}" \
         f"{columns[1]:<{column_width[1]}}" \
         f"{columns[2]:<{column_width[2]}}" \
         f"{columns[3]:<{column_width[3]}}" \
         f"{columns[4]}"
print(output)
input()

for i in range(len(hash_array)):
#    output = format_string.format(field1, field2, i[0], i[1], i[2], i[3], i[4])
#    output = f"{{:<{field1}}}{{:<{field2}}}{{}}".format(i[0], i[1], i[2], i[3], i[4])
   output = f"{hash_array[i][0]:<{column_width[0]}}" \
            f"{hash_array[i][1]:<{column_width[1]}}" \
            f"{hash_array[i][2]:<{column_width[2]}}" \
            f"{hash_array[i][3]:<{column_width[3]}}" \
            f"{hash_array[i][4]}"
   print(output)

# more numbers
print("\nSCRIPT STATS")
print(f'   total files:\t\t{total_files}\n')
#       f'   matched files:\t{len(match_list)}')


# le end